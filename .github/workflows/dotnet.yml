name: .NET

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: windows-latest

    steps:
    - name: Checkout Repo
      uses: actions/checkout@v4
      with:
        path: MeasureApp

    - name: Checkout Dependency Repo
      uses: actions/checkout@v4
      with:
        repository: crthu/carrotlink.net
        path: CarrotLink.NET

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Restore dependencies
      run: dotnet restore MeasureApp/MeasureApp
    
    - name: Build
      run: dotnet build MeasureApp/MeasureApp --no-restore --configuration Release -r win-x64
      
    - name: Test
      run: dotnet test MeasureApp/MeasureApp --no-build --verbosity normal --configuration Release

    - name: Publish App Files
      run: |
        dotnet publish MeasureApp/MeasureApp/MeasureApp.csproj `
        -c Release `
        -o ${{ github.workspace }}/Publish `
        -r win-x64 --no-build

    - name: List App Files
      run: |
        $publishDir = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "Publish"
        Write-Host "--- Listing contents of Publish directory: $publishDir ---"
        Get-ChildItem -Path $publishDir -Recurse 
        
    - name: Extract Project Version
      id: extract_version 
      shell: pwsh 
      run: |
        $projectPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "MeasureApp/MeasureApp/MeasureApp.csproj"
        $node = (Select-Xml -Path $projectPath -XPath "//AssemblyVersion").Node | Select-Object -First 1
        if ($node) {
            $version = $node.InnerText.Trim()
        } else {
            $version = "0.0.0-CI-Fallback"
            Write-Host "🔴 ERROR: AssemblyVersion node NOT found in $projectPath. Using fallback version: $version"
        }
        if ([string]::IsNullOrEmpty($version)) {
            $version = "0.0.0-CI-Fallback-Empty"
            Write-Host "⚠️ Warning: Extracted version was empty. Using fallback version: $version"
        }
        Write-Host "✅ Successfully extracted project version: $version"
        echo "project_version=$version" >> $env:GITHUB_OUTPUT

    - name: Create GitHub Release
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.extract_version.outputs.project_version }} 
        name: Release V${{ steps.extract_version.outputs.project_version }}
        draft: false
        prerelease: false
        files: ${{ github.workspace }}/Publish/MeasureApp.exe # only for test
